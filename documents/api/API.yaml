openapi: 3.0.0
info:
  version: "1.0"
  title: "ZaloPay "
  description: BigAssignment
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/oispmdp/BigAssignment/1.0

tags:
  - name: Auth Service
    description: API of Auth Service
  - name: Payment Service
    description: API of Payment Service
  - name: LuckyMoney Service
    description: API of LuckMoney Service
paths:
  ### Authentication Service

  /api/v1/users/login:
    post:
      tags:
        - Auth Service
      description: >-
        Login to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginForm"
        description: User login to the app
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - code
                  - message
                properties:
                  success:
                    type: boolean
                    default: true
                    example: true
                  code:
                    type: integer
                    default: 200
                    example: 200
                  message:
                    type: string
                    default: "Request successfully"
                  payload:
                    type: object
                    default: {}
                    example: {}

  /api/v1/users/register:
    post:
      tags:
        - Auth Service
      description: >-
        Register to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterForm"
        description: User login to the app
      responses:
        "201":
          description: CREATED
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"

  /api/v1/users/getInfo:
    get:
      tags:
        - Auth Service
      description: >-
        Return user info mation
      responses:
        "200":
          description: CREATED
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - code
                  - message
                properties:
                  success:
                    type: boolean
                    default: true
                    example: true
                  code:
                    type: integer
                    default: 200
                    example: 200
                  message:
                    type: string
                    default: "Request successfully"
                  payload:
                    $ref: "#/components/schemas/UserDTO"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"

  # Create Pin for User
  /api/v1/users/createPin:
    post:
      tags:
        - Auth Service
      description: >-
        User Create Pin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pin
              properties:
                pin:
                  type: string
                  example: "iqewbfj9395fbs932004f5bhjkfbvew894bt75btc5nt79 9c8nmtvn5m9oc5gl983hcrf57890o32d5900a422750fe0ab1"
        description: Create User Pin
      responses:
        "201":
          description: CREATED

  # Has Pin for User
  /api/v1/users/hasPin:
    post:
      tags:
        - Auth Service
      description: >-
        User Create Pin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pin
              properties:
                pin:
                  type: string
                  example: "iqewbfj9395fbs932004f5bhjkfbvew894bt75btc5nt79 9c8nmtvn5m9oc5gl983hcrf57890o32d5900a422750fe0ab1"
        description: Create User Pin
      responses:
        "201":
          description: CREATED

  # Generate Soft Token
  /api/v1/users/createSoftTokenByPin:
    post:
      tags:
        - Auth Service
      description: >-
        User Create Pin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pin
              properties:
                pin:
                  type: string
                  example: "iqewbfj9395fbs932004f5bhjkfbvew894bt75btc5nt79 9c8nmtvn5m9oc5gl983hcrf57890o32d5900a422750fe0ab1"
        description: Create User Pin
      responses:
        "201":
          description: CREATED

  /api/v1/users/signout:
    post:
      tags:
        - Auth Service
      description: >-
        Login to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginForm"
        description: User login to the app
      responses:
        "200":
          description: OK

  /api/v1/systems/login:
    post:
      tags:
        - Auth Service
      description: >-
        Login to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceLoginForm"
        description: User login to the app
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceLoginResponse"

  /api/v1/systems/authorizeUser:
    post:
      tags:
        - Auth Service
      description: >-
        Request Auth Service to Authorize User Token
      parameters:
        - in: header
          name: jwtService
          schema:
            type: string
          required: true
          example: sas8asa8s8asa0sd0as6ad5d9as6d7fs9sf6sd9ds
          description: JWT of service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizeUserRequest"
        description: User login to the app
      responses:
        "200":
          description: OK

  /api/v1/systems/authorizeService:
    post:
      tags:
        - Auth Service
      description: >-
        Request Auth Service to Authorize Service Token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceLoginForm"
        description: User login to the app
      responses:
        "200":
          description: OK

  # Authenticate soft token from user
  /api/v1/systems/authorizeSoftToken:
    post:
      tags:
        - Auth Service
      description: >-
        Request Auth Service to Authorize Service Token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceLoginForm"
        description: User login to the app
      responses:
        "200":
          description: OK
  /api/v1/systems/getUserInfo/{userId}:
    get:
      tags:
        - Auth Service
      description: >-
        Request Auth Service to Authorize Service Token
      parameters:
        - in: path
          name: userId
          schema:
            type: number
          required: true
          description: Id of owner
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
  /api/v1/systems/getSystemInfo/{systemId}:
    get:
      tags:
        - Auth Service
      description: >-
        Request Auth Service to Authorize Service Token
      parameters:
        - in: path
          name: systemId
          schema:
            type: number
          required: true
          description: Id of owner
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemInfo"
  ### Payment

  # User Wallet Information
  /api/v1/me/wallet:
    get:
      tags:
        - Payment Service
      description: >-
        Login to the system
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletResponse"

  # Make transfer from me to other
  /api/v1/me/createTransfer:
    post:
      tags:
        - Payment Service
      description: >-
        Login to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferForm"
        description: User login to the app
      responses:
        "200":
          description: OK

  /api/v1/me/getTransferStatement:
    get:
      tags:
        - Payment Service
      description: >-
        Login to the system
      responses:
        "200":
          description: OK

  /api/v1/me/topup:
    post:
      tags:
        - Payment Service
      description: >-
        Login to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TopupForm"
        description: User login to the app
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopupResponse"

  # Service Wallet Information
  /api/v1/systems/getAllWallets:
    get:
      tags:
        - Payment Service
      description: >-

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletSystemResponse"

  # Make transfer from One service to the other
  /api/v1/systems/createTransfer:
    post:
      tags:
        - Payment Service
      description: >-
        Login to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SystemTransferForm"
        description: User login to the app
      responses:
        "200":
          description: OK

  ### Lucky Money

  # Create Lucky Money from user to a group chat
  /api/v1/createLuckyMoney:
    post:
      tags:
        - LuckyMoney Service
      description: >-
        Login to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLuckyMoneyForm"
        description: User login to the app
      responses:
        "200":
          description: OK
  #
  /api/v1/getLuckyMoney:
    get:
      tags:
        - LuckyMoney Service
      description: >-
        Login to the system

      parameters:
        - in: query
          name: sessionId
          description: session ID
          required: true
          schema:
            type: string
            example: dc190303aea87bdf6e4faa3d59de

      responses:
        "200":
          description: OK

  /api/v1/receiveLuckyMoney:
    post:
      tags:
        - LuckyMoney Service
      description: >-
        Login to the system

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecieveLuckyMoneyForm"
        description: User login to the app
      responses:
        "200":
          description: OK

  ### Chat

  /api/v1/systems/createTransferMessage:
    post:
      tags:
        - Chat Service
      description: >-
        Payment sends transfer message to Chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferMessageRequest"
        description: Payment sends message to Chat
      responses:
        "200":
          description: OK

  /api/v1/systems/createLuckyMoneyMessage:
    post:
      tags:
        - Chat Service
      description: >-
        Payment sends create lucky money message to Chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LuckyMoneyMessageRequest"
        description: Payment sends message to Chat
      responses:
        "200":
          description: OK

  /api/v1/systems/isUserExistInSession:
    post:
      tags:
        - Chat Service
      description: >-
        Lucky call api to check user is in session to Chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserIdSessionIdRequest"
        description: Lucky sends message to Chat
      responses:
        "200":
          description: OK

  /api/v1/systems/receiveLuckyMoneyMessage:
    post:
      tags:
        - Chat Service
      description: >-
        Lucky call api to receive lucky money message Chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReceiveLuckyMoneyMessageRequest"
        description: Lucky sends message to Chat
      responses:
        "200":
          description: OK

components:
  schemas:
    UserDTO:
      type: object
      properties:
        id:
          type: string
          example: uuid
        username:
          type: string
          example: anlg2
        fullName:
          type: string
          example: Trinh An
        dob:
          type: string
          example: 2000:02:02T19:02:02
        phoneNumber:
          type: string
          example: 095786494
        avatar:
          type: string
          example: file.png
        mediumAvatar:
          type: string
          example: file_400.png
        smallAvatar:
          type: string
          example: file_50.png
    LoginForm:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: anlg2
        password:
          type: string
          example: anlg2@123
    CreateLuckyMoneyForm:
      type: object
      required:
        - softToken
        - message
        - sessionChatId
        - type
        - bagNumber
        - amount
      properties:
        softToken:
          type: string
          example: "adsf8asd9fasdfasdf9adsf7asdf"
        message:
          type: string
          example: "hello"
        sessionChatId:
          type: string
          example: "sa8s09sdas-109239ds-d9830432d"
        type:
          type: string
          example: "random"
        bagNumber:
          type: number
          example: 10
        amount:
          type: number
          example: 20000
    RecieveLuckyMoneyForm:
      type: object
      required:
        - luckyMoneyId
      properties:
        luckyMoneyId:
          type: number
          example: 7

    AuthorizeUserRequest:
      type: object
      required:
        - jwtUser
      properties:
        jwtUser:
          type: string
          example: ad8afsd7f8sdf8ad79af7af8adf9ad7
    ServiceLoginForm:
      type: object
      required:
        - service_name
        - service_key
      properties:
        service_name:
          type: string
          example: anlg2
        service_key:
          type: string
          example: anlg2@123
    UserInfo:
      type: object
      required:
        - success
        - code
        - message
        - payload
      properties:
        success:
          type: boolean
          example: true
        code:
          type: number
          example: 200
        message:
          type: string
          example: "success"
        payload:
          type: object
          $ref: "#/components/schemas/UserInfoPayload"
    UserInfoPayload:
      type: object
      required:
        - id
        - username
        - email
        - fullname
      properties:
        id:
          type: number
          example: 1
        username:
          type: string
          example: "ngoctrong"
        email:
          type: string
          example: "trong@gmail.com"
        fullname:
          type: string
          example: "Vo Ngoc Trong"
    SystemInfo:
      type: object
      required:
        - success
        - code
        - message
        - payload
      properties:
        success:
          type: boolean
          example: true
        code:
          type: number
          example: 200
        message:
          type: string
          example: "success"
        payload:
          type: object
          $ref: "#/components/schemas/SystemInfoPayload"
    SystemInfoPayload:
      type: object
      required:
        - id
        - systemName
      properties:
        id:
          type: number
          example: 1
        systemName:
          type: string
          example: "chat"
    ServiceLoginResponse:
      type: object
      required:
        - jwtService
      properties:
        jwtService:
          type: string
          example: ada7da8sd8as8d7asd88as8d8asd8asd6
    RegisterForm:
      type: object
      required:
        - username
        - password
        - fullName
        - email
      properties:
        username:
          type: string
          example: anlg2
        password:
          type: string
          example: anlg2@123
        fullname:
          type: string
          example: An
        email:
          type: string
          example: anlg2@vng.com.vn

    OwnerInfo:
      type: object
      required:
        - balance
      properties:
        success:
          type: boolean
          example: 200000

    WalletResponse:
      type: object
      required:
        - balance
      properties:
        balance:
          type: number
          example: 200000

    WalletInfo:
      type: object
      required:
        - walletId
        - balance
      properties:
        balance:
          type: number
          example: 200000
        walletId:
          type: number
          example: 200000

    WalletSystemResponse:
      type: object
      required:
        - success
        - code
        - message
        - payload
      properties:
        success:
          type: boolean
          default: true
          example: true
        code:
          type: integer
          default: 200
          example: 200
        message:
          type: string
          default: ""
        payload:
          type: array
          items:
            $ref: "#/components/schemas/WalletInfo"

    TopupForm:
      type: object
      required:
        - amount
        - bank_id
      properties:
        amount:
          type: number
          example: 200000
        bank_id:
          type: number
          example: 200000

    TransferForm:
      type: object
      required:
        - receiverId
        - amount
        - message
      properties:
        receiverId:
          type: number
          example: 1
        amount:
          type: number
          example: 100000
        message:
          type: string
          example: Goodbye!

    SystemTransferForm:
      type: object
      required:
        - walletId
        - receiverId
        - amount
        - message
      properties:
        walletId:
          type: number
          example: 1
        receiverId:
          type: number
          example: 1
        amount:
          type: number
          example: 100000
        message:
          type: string
          example: Goodbye!

    TopupResponse:
      type: object
      required:
        - success
        - code
        - message
        - payload
      properties:
        success:
          type: boolean
          default: true
          example: true
        code:
          type: integer
          default: 200
          example: 200
        message:
          type: string
          default: "Processing Transfer"
        payload:
          type: object
          default: {}
          example: {}

    TransferMessageRequest:
      type: object
      required:
        - sourceId
        - targetId
        - amount
        - message
        - createdAt
      properties:
        sourceId:
          type: number
          example: 1
        targetId:
          type: number
          example: 2
        amount:
          type: number
          example: 50000
        message:
          type: string
          example: "Hello"
        createdAt:
          type: string
          example: "26/7/2021"

    LuckyMoneyMessageRequest:
      type: object
      required:
        - userId
        - sessionId
        - luckyMoneyId
        - message
        - createdAt
      properties:
        userId:
          type: number
          example: 1
        sessionId:
          type: string
          example: "ab43242f78fb"
        luckyMoneyId:
          type: number
          example: 1
        message:
          type: string
          example: "Hello"
        createdAt:
          type: string
          example: "26/7/2021"

    UserIdSessionIdRequest:
      type: object
      required:
        - userId
        - sessionId
      properties:
        userId:
          type: number
          example: 1
        sessionId:
          type: string
          example: "ab43242f78fb"

    ReceiveLuckyMoneyMessageRequest:
      type: object
      required:
        - receiverId
        - sessionId
        - luckyMoneyId
        - amount
        - message
        - createdAt
      properties:
        receiverId:
          type: number
          example: 1
        sessionId:
          type: string
          example: "ab43242f78fb"
        luckyMoneyId:
          type: number
          example: 1
        amount:
          type: number
          example: 50000
        message:
          type: string
          example: "Hello"
        createdAt:
          type: string
          example: "26/7/2021"

    # =====================
    Error403:
      type: object
      required:
        - success
        - code
        - message
        - payload
      properties:
        success:
          type: boolean
          default: false
          example: false
        code:
          type: integer
          default: 403
          example: 403
        message:
          type: string
          default: "Forbidden"
        payload:
          type: object
          default: {}
          example: {}
    # =====================
    Error400:
      type: object
      required:
        - success
        - code
        - message
        - payload
      properties:
        success:
          type: boolean
          default: false
          example: false
        code:
          type: integer
          default: 400
          example: 400
        message:
          type: string
          default: "Bad Request"
        payload:
          type: object
          default: {}
          example: {}
    # =====================
    Error401:
      type: object
      required:
        - success
        - code
        - message
        - payload
      properties:
        success:
          type: boolean
          default: false
          example: false
        code:
          type: integer
          default: 401
          example: 401
        message:
          type: string
          default: "Unauthorized"
        payload:
          type: object
          default: {}
          example: {}
    # =====================
    Error404:
      type: object
      required:
        - success
        - code
        - message
        - payload
      properties:
        success:
          type: boolean
          default: false
          example: false
        code:
          type: integer
          default: 404
          example: 404
        message:
          type: string
          default: "Not Found"
        payload:
          type: object
          default: {}
          example: {}
